# Generated by Django 5.2.7 on 2025-10-20 05:44

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnergySource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(choices=[('ELECTRICITY', 'Electricity'), ('DIESEL', 'Diesel'), ('GASOLINE', 'Gasoline'), ('NATURAL_GAS', 'Natural Gas'), ('LPG', 'LPG'), ('SOLAR', 'Solar'), ('STEAM', 'Steam'), ('MANUAL', 'Manual'), ('OTHER', 'Other')], db_index=True, max_length=30, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Energy source',
                'verbose_name_plural': 'Energy sources',
                'ordering': ('code',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('CORE', 'Core / Medular'), ('AUXILIARY', 'Auxiliary / Periférico')], db_index=True, max_length=20)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('purchase_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(3000)])),
                ('purchase_origin', models.CharField(blank=True, max_length=50, null=True)),
                ('utilization_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('description', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipments', to='core.company')),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipments',
                'ordering': ('name', 'id'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentEnergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, max_length=200, null=True)),
                ('energy_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='energy_equipments', to='inventory.energysource')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_energies', to='inventory.equipment')),
            ],
            options={
                'verbose_name': 'Equipment-Energy relation',
                'verbose_name_plural': 'Equipment-Energy relations',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='energy_sources',
            field=models.ManyToManyField(blank=True, related_name='equipments', through='inventory.EquipmentEnergy', to='inventory.energysource'),
        ),
        migrations.CreateModel(
            name='EquipmentMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive'), ('CORRECTIVE', 'Corrective'), ('PREDICTIVE', 'Predictive'), ('CALIBRATION', 'Calibration'), ('OTHER', 'Other')], max_length=50)),
                ('frequency', models.CharField(blank=True, choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMIANNUAL', 'Semiannual'), ('ANNUAL', 'Annual'), ('USAGE_BASED', 'Usage-based')], max_length=50, null=True)),
                ('last_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenances', to='inventory.equipment')),
            ],
            options={
                'verbose_name': 'Equipment maintenance',
                'verbose_name_plural': 'Equipment maintenances',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('EQUIPMENT', 'Equipment / Machinery'), ('TECH_DEVELOPMENT', 'Technological development')], max_length=30)),
                ('item_name', models.CharField(max_length=200)),
                ('motive', models.CharField(choices=[('REPLACEMENT', 'Replacement'), ('CAPACITY_EXPANSION', 'Capacity expansion'), ('MODERNIZATION_AUTOMATION', 'Modernization / Automation'), ('QUALITY_COMPLIANCE', 'Quality / Compliance'), ('NEW_PRODUCT', 'New product'), ('ENERGY_EFFICIENCY', 'Energy efficiency'), ('DIGITALIZATION', 'Digitalization'), ('R_AND_D', 'R&D / Tech development'), ('CERTIFICATION', 'Certification'), ('OTHER', 'Other')], max_length=40)),
                ('amount_cop', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0)])),
                ('funding_source', models.CharField(choices=[('OWN_FUNDS', 'Own funds'), ('BANK_CREDIT', 'Bank credit'), ('SUPPLIER_CREDIT', 'Supplier credit'), ('LEASING', 'Leasing'), ('PUBLIC_GRANT', 'Public grant'), ('COFINANCING', 'Cofinancing'), ('VENTURE', 'Venture / Equity'), ('OTHER', 'Other')], max_length=80)),
                ('funding_entity', models.CharField(blank=True, max_length=150, null=True)),
                ('investment_date', models.DateField(blank=True, null=True)),
                ('investment_year', models.PositiveSmallIntegerField(blank=True, help_text='If exact date is unknown', null=True, validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(3000)])),
                ('status', models.CharField(blank=True, choices=[('PLANNED', 'Planned'), ('APPROVED', 'Approved'), ('IN_PROGRESS', 'In progress'), ('EXECUTED', 'Executed')], max_length=20, null=True)),
                ('equipment_category', models.CharField(blank=True, choices=[('CORE', 'Core / Medular'), ('AUXILIARY', 'Auxiliary / Periférico')], help_text='If the investment explicitly targets CORE/AUXILIARY machinery', max_length=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='investments', to='core.company')),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investments', to='inventory.equipment')),
            ],
            options={
                'verbose_name': 'Investment',
                'verbose_name_plural': 'Investments',
                'ordering': ('-investment_date', '-investment_year', '-created_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('RAW_MATERIAL', 'Raw material'), ('SUPPLY', 'Supply / Input')], max_length=20)),
                ('name', models.CharField(max_length=150)),
                ('origin', models.CharField(blank=True, choices=[('NATIONAL', 'National'), ('IMPORTED', 'Imported'), ('LOCAL', 'Local'), ('OWN_PRODUCTION', 'Own production'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('inventory_management', models.CharField(blank=True, choices=[('NO_FORMAL', 'No formal'), ('MIN_MAX', 'Min-Max'), ('ABC', 'ABC'), ('JIT', 'JIT'), ('KANBAN', 'Kanban'), ('FIFO', 'FIFO'), ('LIFO', 'LIFO'), ('FEFO', 'FEFO'), ('CONSIGNMENT', 'Consignment'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('cost_share_pct', models.DecimalField(decimal_places=2, help_text='Share of total material cost (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='core.company')),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlantLayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('layout_type', models.CharField(choices=[('FUNCTIONAL', 'Functional / Process'), ('PRODUCT_LINE', 'Product / Line'), ('CELLULAR', 'Cellular'), ('FIXED_POSITION', 'Fixed-position'), ('HYBRID', 'Hybrid'), ('WAREHOUSE', 'Warehouse')], max_length=80)),
                ('description', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plant_layouts', to='core.company')),
            ],
            options={
                'verbose_name': 'Plant layout',
                'verbose_name_plural': 'Plant layouts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoftwareAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('usage', models.CharField(choices=[('ERP', 'ERP'), ('CRM', 'CRM'), ('ACCOUNTING', 'Accounting'), ('INVENTORY', 'Inventory'), ('PRODUCTION', 'Production'), ('QUALITY', 'Quality'), ('MAINTENANCE', 'Maintenance'), ('PAYROLL', 'Payroll'), ('BI', 'Business Intelligence / Analytics'), ('OFFICE', 'Office / Productivity'), ('OTHER', 'Other')], max_length=120)),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('area', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='software_assets', to='core.company')),
            ],
            options={
                'verbose_name': 'Software asset',
                'verbose_name_plural': 'Software assets',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TechnicalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_type', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('CALIBRATION', 'Calibration'), ('REPAIR', 'Repair'), ('SOFTWARE_SUPPORT', 'Software support'), ('TRAINING', 'Training'), ('OTHER', 'Other')], max_length=50)),
                ('provider_name', models.CharField(max_length=200)),
                ('service_description', models.CharField(blank=True, max_length=300, null=True)),
                ('service_location', models.CharField(blank=True, choices=[('ON_SITE', 'On-site'), ('OFF_SITE', 'Off-site'), ('OTHER', 'Other')], max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technical_services', to='core.company')),
            ],
            options={
                'verbose_name': 'Technical service',
                'verbose_name_plural': 'Technical services',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkforceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.CharField(max_length=100)),
                ('people_count', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('education_level', models.CharField(choices=[('BASICA', 'Básica'), ('MEDIA', 'Media'), ('TECNICO', 'Técnico'), ('TECNOLOGO', 'Tecnólogo'), ('PROFESIONAL', 'Profesional'), ('ESPECIALIZACION', 'Especialización'), ('MAESTRIA', 'Maestría'), ('DOCTORADO', 'Doctorado')], max_length=40)),
                ('avg_experience_years', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workforce_profiles', to='core.company')),
            ],
            options={
                'verbose_name': 'Workforce profile',
                'verbose_name_plural': 'Workforce profiles',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('modality', models.CharField(choices=[('CONTINUOUS', 'Continuous'), ('BATCH', 'Batch'), ('MAKE_TO_ORDER', 'Make-to-order'), ('OUTSOURCING_MAQUILA', 'Outsourcing / Maquila'), ('SERVUCTION_FRONT_BACK', 'Servuction front/back'), ('OTHER', 'Other')], max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('shift_pattern', models.CharField(blank=True, max_length=120, null=True)),
                ('shifts_count', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_methods', to='core.company')),
            ],
            options={
                'verbose_name': 'Work method',
                'verbose_name_plural': 'Work methods',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DisciplineAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.CharField(max_length=150)),
                ('importance_score', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('adoption_level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_assessments', to='core.company')),
            ],
            options={
                'verbose_name': 'Discipline assessment',
                'verbose_name_plural': 'Discipline assessments',
                'abstract': False,
                'indexes': [models.Index(fields=['company', 'item'], name='inventory_d_company_a09868_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='equipmentenergy',
            constraint=models.UniqueConstraint(fields=('equipment', 'energy_source'), name='uq_equipment_energy_source'),
        ),
        migrations.AddIndex(
            model_name='equipment',
            index=models.Index(fields=['company', 'category'], name='inventory_e_company_b54ffa_idx'),
        ),
        migrations.AddIndex(
            model_name='equipment',
            index=models.Index(fields=['company', 'name'], name='inventory_e_company_af762b_idx'),
        ),
        migrations.AddIndex(
            model_name='equipmentmaintenance',
            index=models.Index(fields=['equipment', 'maintenance_type'], name='inventory_e_equipme_28b0a1_idx'),
        ),
        migrations.AddIndex(
            model_name='investment',
            index=models.Index(fields=['company', 'category'], name='inventory_i_company_c803e2_idx'),
        ),
        migrations.AddIndex(
            model_name='investment',
            index=models.Index(fields=['company', 'motive'], name='inventory_i_company_38f9e8_idx'),
        ),
        migrations.AddIndex(
            model_name='material',
            index=models.Index(fields=['company', 'category'], name='inventory_m_company_93ec76_idx'),
        ),
        migrations.AddIndex(
            model_name='material',
            index=models.Index(fields=['company', 'name'], name='inventory_m_company_5b0c62_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='material',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='plantlayout',
            index=models.Index(fields=['company', 'layout_type'], name='inventory_p_company_bff096_idx'),
        ),
        migrations.AddIndex(
            model_name='softwareasset',
            index=models.Index(fields=['company', 'usage'], name='inventory_s_company_31efba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='softwareasset',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='technicalservice',
            index=models.Index(fields=['company', 'service_type'], name='inventory_t_company_4a9188_idx'),
        ),
        migrations.AddIndex(
            model_name='workforceprofile',
            index=models.Index(fields=['company', 'area'], name='inventory_w_company_24f034_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workforceprofile',
            unique_together={('company', 'area')},
        ),
        migrations.AddIndex(
            model_name='workmethod',
            index=models.Index(fields=['company', 'modality'], name='inventory_w_company_8a106d_idx'),
        ),
    ]
